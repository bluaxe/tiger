
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 07 20:04:10 CST 2014
//----------------------------------------------------

package tiger.parser;

import java_cup.runtime.*;
import tiger.Absyn.*;

/** CUP v0.10k generated parser.
  * @version Tue Jan 07 20:04:10 CST 2014
  */
public class Tigerparser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Tigerparser() {super();}

  /** Constructor which sets the default scanner. */
  public Tigerparser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\004\003\000\002\003" +
    "\007\000\002\003\006\000\002\003\003\000\002\003\012" +
    "\000\002\003\006\000\002\003\006\000\002\003\010\000" +
    "\002\003\006\000\002\003\005\000\002\003\010\000\002" +
    "\003\006\000\002\003\005\000\002\003\005\000\002\003" +
    "\004\000\002\003\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\005\003\000" +
    "\002\005\005\000\002\006\003\000\002\006\005\000\002" +
    "\020\005\000\002\020\007\000\002\021\003\000\002\021" +
    "\005\000\002\021\006\000\002\021\006\000\002\010\003" +
    "\000\002\010\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\012\003\000\002\012\004\000\002" +
    "\011\006\000\002\016\003\000\002\016\005\000\002\016" +
    "\004\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\016\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\007\000\002" +
    "\017\007\000\002\017\007\000\002\013\010\000\002\013" +
    "\006\000\002\013\010\000\002\013\010\000\002\015\003" +
    "\000\002\015\004\000\002\014\013\000\002\014\013\000" +
    "\002\014\013\000\002\014\011\000\002\014\012\000\002" +
    "\014\012\000\002\014\012\000\002\014\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\030\005\004\025\013\030\006\031\007\036" +
    "\016\040\021\047\010\054\017\060\005\061\014\062\011" +
    "\001\002\000\030\005\004\025\013\030\006\031\007\036" +
    "\016\040\021\047\010\054\017\060\005\061\014\062\011" +
    "\001\002\000\070\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\023\uffe0\026\uffe0\027\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0" +
    "\053\uffe0\055\uffe0\057\uffe0\001\002\000\030\005\004\025" +
    "\013\030\006\031\007\036\016\040\021\047\010\054\017" +
    "\060\005\061\014\062\011\001\002\000\004\061\247\001" +
    "\002\000\070\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\023\uffe2\026\uffe2\027\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\041\uffe2\042\uffe2\045\uffe2\046\uffe2\053" +
    "\uffe2\055\uffe2\057\uffe2\001\002\000\070\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1" +
    "\026\uffe1\027\uffe1\032\uffe1\033\uffe1\034\uffe1\041\uffe1\042" +
    "\uffe1\045\uffe1\046\uffe1\053\uffe1\055\uffe1\057\uffe1\001\002" +
    "\000\004\002\246\001\002\000\030\005\004\025\013\030" +
    "\006\031\007\036\016\040\021\047\010\054\017\060\005" +
    "\061\014\062\011\001\002\000\102\002\uffd9\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\026\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9\037\uffd9" +
    "\041\uffd9\042\uffd9\045\uffd9\046\uffd9\052\215\053\uffd9\054" +
    "\216\055\uffd9\056\214\057\uffd9\001\002\000\034\002\000" +
    "\004\034\005\026\006\037\007\030\011\036\012\031\013" +
    "\035\014\040\015\033\016\032\017\027\020\041\001\002" +
    "\000\010\041\100\045\073\046\074\001\002\000\032\005" +
    "\004\025\013\030\006\031\007\036\016\040\021\047\010" +
    "\054\017\055\062\060\005\061\014\062\011\001\002\000" +
    "\076\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\023\023\ufff1\026\ufff1\027\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\037\024\041\ufff1\042\ufff1\045\ufff1\046" +
    "\ufff1\052\022\053\ufff1\055\ufff1\057\ufff1\001\002\000\070" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\023\ufffd\026\ufffd\027\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\053\ufffd\055\ufffd" +
    "\057\ufffd\001\002\000\030\005\004\025\013\030\006\031" +
    "\007\036\016\040\021\047\010\054\017\060\005\061\014" +
    "\062\011\001\002\000\004\061\056\001\002\000\030\005" +
    "\004\025\013\030\006\031\007\036\016\040\021\047\010" +
    "\054\017\060\005\061\014\062\011\001\002\000\070\002" +
    "\ufff0\004\034\005\026\006\037\007\030\011\036\012\031" +
    "\013\035\014\040\015\033\016\032\017\027\020\041\021" +
    "\ufff0\023\ufff0\026\ufff0\027\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\041\ufff0\042\ufff0\045\ufff0\046\ufff0\053\ufff0\055\ufff0\057" +
    "\ufff0\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\070\002\uffef\004\034\005\026\006\037" +
    "\007\030\011\036\012\031\013\035\014\040\015\033\016" +
    "\032\017\027\020\uffef\021\uffef\023\uffef\026\uffef\027\uffef" +
    "\032\uffef\033\uffef\034\uffef\041\uffef\042\uffef\045\uffef\046" +
    "\uffef\053\uffef\055\uffef\057\uffef\001\002\000\054\002\uffec" +
    "\004\034\005\026\006\037\007\030\017\uffec\020\uffec\021" +
    "\uffec\023\uffec\026\uffec\027\uffec\032\uffec\033\uffec\034\uffec" +
    "\041\uffec\042\uffec\045\uffec\046\uffec\053\uffec\055\uffec\057" +
    "\uffec\001\002\000\070\002\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\023\uffe6\026\uffe6\027\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\041\uffe6\042\uffe6\045\uffe6\046" +
    "\uffe6\053\uffe6\055\uffe6\057\uffe6\001\002\000\054\002\uffea" +
    "\004\034\005\026\006\037\007\030\017\uffea\020\uffea\021" +
    "\uffea\023\uffea\026\uffea\027\uffea\032\uffea\033\uffea\034\uffea" +
    "\041\uffea\042\uffea\045\uffea\046\uffea\053\uffea\055\uffea\057" +
    "\uffea\001\002\000\054\002\uffeb\004\034\005\026\006\037" +
    "\007\030\017\uffeb\020\uffeb\021\uffeb\023\uffeb\026\uffeb\027" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\041\uffeb\042\uffeb\045\uffeb" +
    "\046\uffeb\053\uffeb\055\uffeb\057\uffeb\001\002\000\070\002" +
    "\uffe7\004\uffe7\005\uffe7\006\037\007\030\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\023\uffe7\026\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\041\uffe7\042\uffe7\045\uffe7\046\uffe7\053\uffe7\055\uffe7\057" +
    "\uffe7\001\002\000\054\002\uffed\004\034\005\026\006\037" +
    "\007\030\017\uffed\020\uffed\021\uffed\023\uffed\026\uffed\027" +
    "\uffed\032\uffed\033\uffed\034\uffed\041\uffed\042\uffed\045\uffed" +
    "\046\uffed\053\uffed\055\uffed\057\uffed\001\002\000\054\002" +
    "\uffe8\004\034\005\026\006\037\007\030\017\uffe8\020\uffe8" +
    "\021\uffe8\023\uffe8\026\uffe8\027\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\041\uffe8\042\uffe8\045\uffe8\046\uffe8\053\uffe8\055\uffe8" +
    "\057\uffe8\001\002\000\054\002\uffe9\004\034\005\026\006" +
    "\037\007\030\017\uffe9\020\uffe9\021\uffe9\023\uffe9\026\uffe9" +
    "\027\uffe9\032\uffe9\033\uffe9\034\uffe9\041\uffe9\042\uffe9\045" +
    "\uffe9\046\uffe9\053\uffe9\055\uffe9\057\uffe9\001\002\000\070" +
    "\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\023\uffe5\026\uffe5\027\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\053\uffe5\055\uffe5" +
    "\057\uffe5\001\002\000\070\002\uffee\004\034\005\026\006" +
    "\037\007\030\011\036\012\031\013\035\014\040\015\033" +
    "\016\032\017\uffee\020\uffee\021\uffee\023\uffee\026\uffee\027" +
    "\uffee\032\uffee\033\uffee\034\uffee\041\uffee\042\uffee\045\uffee" +
    "\046\uffee\053\uffee\055\uffee\057\uffee\001\002\000\070\002" +
    "\uffe4\004\uffe4\005\uffe4\006\037\007\030\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\023\uffe4\026\uffe4\027\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\041\uffe4\042\uffe4\045\uffe4\046\uffe4\053\uffe4\055\uffe4\057" +
    "\uffe4\001\002\000\076\002\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8" +
    "\027\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8\041\uffd8\042" +
    "\uffd8\045\uffd8\046\uffd8\052\uffd8\053\uffd8\055\uffd8\057\uffd8" +
    "\001\002\000\034\004\034\005\026\006\037\007\030\011" +
    "\036\012\031\013\035\014\040\015\033\016\032\017\027" +
    "\020\041\053\060\001\002\000\076\002\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\026\uffd7\027\uffd7\032\uffd7\033\uffd7\034\uffd7\037\uffd7" +
    "\041\uffd7\042\uffd7\045\uffd7\046\uffd7\052\uffd7\053\uffd7\055" +
    "\uffd7\057\uffd7\001\002\000\004\055\066\001\002\000\070" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\023\ufff2\026\ufff2\027\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\041\ufff2\042\ufff2\045\ufff2\046\ufff2\053\ufff2\055\ufff2" +
    "\057\ufff2\001\002\000\040\004\034\005\026\006\037\007" +
    "\030\011\036\012\031\013\035\014\040\015\033\016\032" +
    "\017\027\020\041\023\064\032\uffdf\055\uffdf\001\002\000" +
    "\030\005\004\025\013\030\006\031\007\036\016\040\021" +
    "\047\010\054\017\060\005\061\014\062\011\001\002\000" +
    "\006\032\uffde\055\uffde\001\002\000\070\002\ufff3\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3" +
    "\026\ufff3\027\ufff3\032\ufff3\033\ufff3\034\ufff3\041\ufff3\042" +
    "\ufff3\045\ufff3\046\ufff3\053\ufff3\055\ufff3\057\ufff3\001\002" +
    "\000\012\041\uffd1\042\uffd1\045\uffd1\046\uffd1\001\002\000" +
    "\012\041\uffd3\042\uffd3\045\uffd3\046\uffd3\001\002\000\012" +
    "\041\100\042\uffbb\045\uffbb\046\uffbb\001\002\000\004\042" +
    "\207\001\002\000\004\061\172\001\002\000\004\061\153" +
    "\001\002\000\012\041\uffd0\042\uffd0\045\uffd0\046\074\001" +
    "\002\000\012\041\100\042\uffd5\045\073\046\074\001\002" +
    "\000\012\041\uffd2\042\uffd2\045\uffd2\046\uffd2\001\002\000" +
    "\004\061\101\001\002\000\004\054\102\001\002\000\006" +
    "\055\105\061\103\001\002\000\004\024\137\001\002\000" +
    "\004\055\122\001\002\000\006\015\106\024\107\001\002" +
    "\000\030\005\004\025\013\030\006\031\007\036\016\040" +
    "\021\047\010\054\017\060\005\061\014\062\011\001\002" +
    "\000\010\043\112\044\111\061\110\001\002\000\004\015" +
    "\117\001\002\000\004\015\115\001\002\000\004\015\113" +
    "\001\002\000\030\005\004\025\013\030\006\031\007\036" +
    "\016\040\021\047\010\054\017\060\005\061\014\062\011" +
    "\001\002\000\042\004\034\005\026\006\037\007\030\011" +
    "\036\012\031\013\035\014\040\015\033\016\032\017\027" +
    "\020\041\041\uffb4\042\uffb4\045\uffb4\046\uffb4\001\002\000" +
    "\030\005\004\025\013\030\006\031\007\036\016\040\021" +
    "\047\010\054\017\060\005\061\014\062\011\001\002\000" +
    "\042\004\034\005\026\006\037\007\030\011\036\012\031" +
    "\013\035\014\040\015\033\016\032\017\027\020\041\041" +
    "\uffb3\042\uffb3\045\uffb3\046\uffb3\001\002\000\030\005\004" +
    "\025\013\030\006\031\007\036\016\040\021\047\010\054" +
    "\017\060\005\061\014\062\011\001\002\000\042\004\034" +
    "\005\026\006\037\007\030\011\036\012\031\013\035\014" +
    "\040\015\033\016\032\017\027\020\041\041\uffb5\042\uffb5" +
    "\045\uffb5\046\uffb5\001\002\000\042\004\034\005\026\006" +
    "\037\007\030\011\036\012\031\013\035\014\040\015\033" +
    "\016\032\017\027\020\041\041\uffb2\042\uffb2\045\uffb2\046" +
    "\uffb2\001\002\000\006\015\123\024\124\001\002\000\030" +
    "\005\004\025\013\030\006\031\007\036\016\040\021\047" +
    "\010\054\017\060\005\061\014\062\011\001\002\000\010" +
    "\043\127\044\126\061\125\001\002\000\004\015\134\001" +
    "\002\000\004\015\132\001\002\000\004\015\130\001\002" +
    "\000\030\005\004\025\013\030\006\031\007\036\016\040" +
    "\021\047\010\054\017\060\005\061\014\062\011\001\002" +
    "\000\042\004\034\005\026\006\037\007\030\011\036\012" +
    "\031\013\035\014\040\015\033\016\032\017\027\020\041" +
    "\041\uffb8\042\uffb8\045\uffb8\046\uffb8\001\002\000\030\005" +
    "\004\025\013\030\006\031\007\036\016\040\021\047\010" +
    "\054\017\060\005\061\014\062\011\001\002\000\042\004" +
    "\034\005\026\006\037\007\030\011\036\012\031\013\035" +
    "\014\040\015\033\016\032\017\027\020\041\041\uffb7\042" +
    "\uffb7\045\uffb7\046\uffb7\001\002\000\030\005\004\025\013" +
    "\030\006\031\007\036\016\040\021\047\010\054\017\060" +
    "\005\061\014\062\011\001\002\000\042\004\034\005\026" +
    "\006\037\007\030\011\036\012\031\013\035\014\040\015" +
    "\033\016\032\017\027\020\041\041\uffb9\042\uffb9\045\uffb9" +
    "\046\uffb9\001\002\000\042\004\034\005\026\006\037\007" +
    "\030\011\036\012\031\013\035\014\040\015\033\016\032" +
    "\017\027\020\041\041\uffb6\042\uffb6\045\uffb6\046\uffb6\001" +
    "\002\000\010\043\142\044\141\061\140\001\002\000\010" +
    "\021\147\055\uffc5\057\uffc5\001\002\000\010\021\145\055" +
    "\uffc3\057\uffc3\001\002\000\010\021\143\055\uffc4\057\uffc4" +
    "\001\002\000\004\061\103\001\002\000\006\055\uffc1\057" +
    "\uffc1\001\002\000\004\061\103\001\002\000\006\055\uffc0" +
    "\057\uffc0\001\002\000\004\061\103\001\002\000\006\055" +
    "\uffc2\057\uffc2\001\002\000\004\042\uffd4\001\002\000\012" +
    "\041\uffcf\042\uffcf\045\uffcf\046\uffcf\001\002\000\004\015" +
    "\154\001\002\000\014\035\162\043\161\044\157\056\156" +
    "\061\155\001\002\000\012\041\uffcd\042\uffcd\045\uffcd\046" +
    "\uffcd\001\002\000\006\057\170\061\103\001\002\000\012" +
    "\041\uffc6\042\uffc6\045\uffc6\046\uffc6\001\002\000\012\041" +
    "\uffce\042\uffce\045\uffce\046\uffce\001\002\000\012\041\uffc7" +
    "\042\uffc7\045\uffc7\046\uffc7\001\002\000\004\050\163\001" +
    "\002\000\010\043\166\044\165\061\164\001\002\000\012" +
    "\041\uffca\042\uffca\045\uffca\046\uffca\001\002\000\012\041" +
    "\uffc8\042\uffc8\045\uffc8\046\uffc8\001\002\000\012\041\uffc9" +
    "\042\uffc9\045\uffc9\046\uffc9\001\002\000\004\057\171\001" +
    "\002\000\012\041\uffcb\042\uffcb\045\uffcb\046\uffcb\001\002" +
    "\000\012\041\uffcc\042\uffcc\045\uffcc\046\uffcc\001\002\000" +
    "\006\024\173\037\174\001\002\000\010\043\200\044\177" +
    "\061\176\001\002\000\030\005\004\025\013\030\006\031" +
    "\007\036\016\040\021\047\010\054\017\060\005\061\014" +
    "\062\011\001\002\000\042\004\034\005\026\006\037\007" +
    "\030\011\036\012\031\013\035\014\040\015\033\016\032" +
    "\017\027\020\041\041\uffbe\042\uffbe\045\uffbe\046\uffbe\001" +
    "\002\000\004\037\205\001\002\000\004\037\203\001\002" +
    "\000\004\037\201\001\002\000\030\005\004\025\013\030" +
    "\006\031\007\036\016\040\021\047\010\054\017\060\005" +
    "\061\014\062\011\001\002\000\042\004\034\005\026\006" +
    "\037\007\030\011\036\012\031\013\035\014\040\015\033" +
    "\016\032\017\027\020\041\041\uffbd\042\uffbd\045\uffbd\046" +
    "\uffbd\001\002\000\030\005\004\025\013\030\006\031\007" +
    "\036\016\040\021\047\010\054\017\060\005\061\014\062" +
    "\011\001\002\000\042\004\034\005\026\006\037\007\030" +
    "\011\036\012\031\013\035\014\040\015\033\016\032\017" +
    "\027\020\041\041\uffbc\042\uffbc\045\uffbc\046\uffbc\001\002" +
    "\000\030\005\004\025\013\030\006\031\007\036\016\040" +
    "\021\047\010\054\017\060\005\061\014\062\011\001\002" +
    "\000\042\004\034\005\026\006\037\007\030\011\036\012" +
    "\031\013\035\014\040\015\033\016\032\017\027\020\041" +
    "\041\uffbf\042\uffbf\045\uffbf\046\uffbf\001\002\000\032\005" +
    "\004\025\013\030\006\031\007\032\211\036\016\040\021" +
    "\047\010\054\017\060\005\061\014\062\011\001\002\000" +
    "\004\032\212\001\002\000\070\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\023\ufffe\026\ufffe" +
    "\027\ufffe\032\ufffe\033\ufffe\034\ufffe\041\ufffe\042\ufffe\045" +
    "\ufffe\046\ufffe\053\ufffe\055\ufffe\057\ufffe\001\002\000\070" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\023\uffff\026\uffff\027\uffff\032\uffff\033\uffff\034" +
    "\uffff\041\uffff\042\uffff\045\uffff\046\uffff\053\uffff\055\uffff" +
    "\057\uffff\001\002\000\012\041\uffba\042\uffba\045\uffba\046" +
    "\uffba\001\002\000\006\057\232\061\231\001\002\000\030" +
    "\005\004\025\013\030\006\031\007\036\016\040\021\047" +
    "\010\054\017\060\005\061\014\062\011\001\002\000\032" +
    "\005\004\025\013\030\006\031\007\036\016\040\021\047" +
    "\010\054\017\055\220\060\005\061\014\062\011\001\002" +
    "\000\004\055\224\001\002\000\070\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\023\ufff4\026" +
    "\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4\041\ufff4\042\ufff4" +
    "\045\ufff4\046\ufff4\053\ufff4\055\ufff4\057\ufff4\001\002\000" +
    "\036\004\034\005\026\006\037\007\030\011\036\012\031" +
    "\013\035\014\040\015\033\016\032\017\027\020\041\021" +
    "\222\055\uffdd\001\002\000\030\005\004\025\013\030\006" +
    "\031\007\036\016\040\021\047\010\054\017\060\005\061" +
    "\014\062\011\001\002\000\004\055\uffdc\001\002\000\070" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\023\ufff5\026\ufff5\027\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\041\ufff5\042\ufff5\045\ufff5\046\ufff5\053\ufff5\055\ufff5" +
    "\057\ufff5\001\002\000\034\004\034\005\026\006\037\007" +
    "\030\011\036\012\031\013\035\014\040\015\033\016\032" +
    "\017\027\020\041\053\226\001\002\000\100\002\uffd6\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\026\uffd6\027\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\037\uffd6\041\uffd6\042\uffd6\045\uffd6\046\uffd6\050\227\052" +
    "\uffd6\053\uffd6\055\uffd6\057\uffd6\001\002\000\030\005\004" +
    "\025\013\030\006\031\007\036\016\040\021\047\010\054" +
    "\017\060\005\061\014\062\011\001\002\000\070\002\ufff6" +
    "\004\034\005\026\006\037\007\030\011\036\012\031\013" +
    "\035\014\040\015\033\016\032\017\027\020\041\021\ufff6" +
    "\023\ufff6\026\ufff6\027\ufff6\032\ufff6\033\ufff6\034\ufff6\041" +
    "\ufff6\042\ufff6\045\ufff6\046\ufff6\053\ufff6\055\ufff6\057\ufff6" +
    "\001\002\000\004\015\235\001\002\000\070\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\023" +
    "\ufff7\026\ufff7\027\ufff7\032\ufff7\033\ufff7\034\ufff7\041\ufff7" +
    "\042\ufff7\045\ufff7\046\ufff7\053\ufff7\055\ufff7\057\ufff7\001" +
    "\002\000\004\057\234\001\002\000\070\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\023\ufff8" +
    "\026\ufff8\027\ufff8\032\ufff8\033\ufff8\034\ufff8\041\ufff8\042" +
    "\ufff8\045\ufff8\046\ufff8\053\ufff8\055\ufff8\057\ufff8\001\002" +
    "\000\030\005\004\025\013\030\006\031\007\036\016\040" +
    "\021\047\010\054\017\060\005\061\014\062\011\001\002" +
    "\000\036\004\034\005\026\006\037\007\030\011\036\012" +
    "\031\013\035\014\040\015\033\016\032\017\027\020\041" +
    "\021\237\057\uffdb\001\002\000\004\061\231\001\002\000" +
    "\004\057\uffda\001\002\000\034\004\034\005\026\006\037" +
    "\007\030\011\036\012\031\013\035\014\040\015\033\016" +
    "\032\017\027\020\041\026\242\001\002\000\030\005\004" +
    "\025\013\030\006\031\007\036\016\040\021\047\010\054" +
    "\017\060\005\061\014\062\011\001\002\000\070\002\ufffa" +
    "\004\034\005\026\006\037\007\030\011\036\012\031\013" +
    "\035\014\040\015\033\016\032\017\027\020\041\021\ufffa" +
    "\023\ufffa\026\ufffa\027\244\032\ufffa\033\ufffa\034\ufffa\041" +
    "\ufffa\042\ufffa\045\ufffa\046\ufffa\053\ufffa\055\ufffa\057\ufffa" +
    "\001\002\000\030\005\004\025\013\030\006\031\007\036" +
    "\016\040\021\047\010\054\017\060\005\061\014\062\011" +
    "\001\002\000\070\002\ufff9\004\034\005\026\006\037\007" +
    "\030\011\036\012\031\013\035\014\040\015\033\016\032" +
    "\017\027\020\041\021\ufff9\023\ufff9\026\ufff9\027\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\041\ufff9\042\ufff9\045\ufff9\046\ufff9" +
    "\053\ufff9\055\ufff9\057\ufff9\001\002\000\004\002\001\001" +
    "\002\000\004\037\250\001\002\000\030\005\004\025\013" +
    "\030\006\031\007\036\016\040\021\047\010\054\017\060" +
    "\005\061\014\062\011\001\002\000\034\004\034\005\026" +
    "\006\037\007\030\011\036\012\031\013\035\014\040\015" +
    "\033\016\032\017\027\020\041\034\252\001\002\000\030" +
    "\005\004\025\013\030\006\031\007\036\016\040\021\047" +
    "\010\054\017\060\005\061\014\062\011\001\002\000\034" +
    "\004\034\005\026\006\037\007\030\011\036\012\031\013" +
    "\035\014\040\015\033\016\032\017\027\020\041\033\254" +
    "\001\002\000\030\005\004\025\013\030\006\031\007\036" +
    "\016\040\021\047\010\054\017\060\005\061\014\062\011" +
    "\001\002\000\070\002\ufffc\004\034\005\026\006\037\007" +
    "\030\011\036\012\031\013\035\014\040\015\033\016\032" +
    "\017\027\020\041\021\ufffc\023\ufffc\026\ufffc\027\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\041\ufffc\042\ufffc\045\ufffc\046\ufffc" +
    "\053\ufffc\055\ufffc\057\ufffc\001\002\000\034\004\034\005" +
    "\026\006\037\007\030\011\036\012\031\013\035\014\040" +
    "\015\033\016\032\017\027\020\041\033\257\001\002\000" +
    "\030\005\004\025\013\030\006\031\007\036\016\040\021" +
    "\047\010\054\017\060\005\061\014\062\011\001\002\000" +
    "\070\002\ufffb\004\034\005\026\006\037\007\030\011\036" +
    "\012\031\013\035\014\040\015\033\016\032\017\027\020" +
    "\041\021\ufffb\023\ufffb\026\ufffb\027\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\041\ufffb\042\ufffb\045\ufffb\046\ufffb\053\ufffb\055" +
    "\ufffb\057\ufffb\001\002\000\070\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\026\uffe3" +
    "\027\uffe3\032\uffe3\033\uffe3\034\uffe3\041\uffe3\042\uffe3\045" +
    "\uffe3\046\uffe3\053\uffe3\055\uffe3\057\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\010\003\014\004\011\021\017\001\001\000" +
    "\006\003\260\021\017\001\001\000\002\001\001\000\006" +
    "\003\255\021\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\240" +
    "\021\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\075\010\071\011\074\012\067\013\076\014\070" +
    "\015\066\001\001\000\010\003\062\005\060\021\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\056" +
    "\021\017\001\001\000\002\001\001\000\006\003\024\021" +
    "\017\001\001\000\002\001\001\000\006\003\054\021\017" +
    "\001\001\000\006\003\053\021\017\001\001\000\006\003" +
    "\052\021\017\001\001\000\006\003\051\021\017\001\001" +
    "\000\006\003\050\021\017\001\001\000\006\003\047\021" +
    "\017\001\001\000\006\003\046\021\017\001\001\000\006" +
    "\003\045\021\017\001\001\000\006\003\044\021\017\001" +
    "\001\000\006\003\043\021\017\001\001\000\006\003\042" +
    "\021\017\001\001\000\006\003\041\021\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\062\005\064\021" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\070\015\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\074\012\151\001\001\000\020\007\075\010" +
    "\150\011\074\012\067\013\076\014\070\015\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\120\021\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\113\021\017\001\001\000\002\001" +
    "\001\000\006\003\115\021\017\001\001\000\002\001\001" +
    "\000\006\003\117\021\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\135\021\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\130\021\017\001\001" +
    "\000\002\001\001\000\006\003\132\021\017\001\001\000" +
    "\002\001\001\000\006\003\134\021\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\143" +
    "\001\001\000\002\001\001\000\004\017\145\001\001\000" +
    "\002\001\001\000\004\017\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\157\001\001\000\002\001\001\000\004\017\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\174\021\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\201\021\017\001\001\000\002\001\001\000" +
    "\006\003\203\021\017\001\001\000\002\001\001\000\006" +
    "\003\205\021\017\001\001\000\002\001\001\000\010\003" +
    "\062\005\207\021\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\232\001\001\000\006\003\224\021\017\001\001\000\010" +
    "\003\220\006\216\021\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\220\006\222" +
    "\021\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\227\021\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\235" +
    "\021\017\001\001\000\002\001\001\000\004\020\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\242" +
    "\021\017\001\001\000\002\001\001\000\006\003\244\021" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\250\021\017\001\001\000\002\001" +
    "\001\000\006\003\252\021\017\001\001\000\002\001\001" +
    "\000\006\003\254\021\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\257\021\017\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Tigerparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Tigerparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Tigerparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


	public Tigerlex lexer;
	public Exp parseResult;

	public Tigerparser(Tigerlex lex){
		super(lex);
		lexer = lex;
	}

	public void say(String msg){
		lexer.error(msg);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Tigerparser$actions {
  private final Tigerparser parser;

  /** Constructor */
  CUP$Tigerparser$actions(Tigerparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Tigerparser$do_action(
    int                        CUP$Tigerparser$act_num,
    java_cup.runtime.lr_parser CUP$Tigerparser$parser,
    java.util.Stack            CUP$Tigerparser$stack,
    int                        CUP$Tigerparser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Tigerparser$result;

      /* select the action based on the action number */
      switch (CUP$Tigerparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function_decl ::= FUNCTION ID LPAREN RPAREN EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FunctionDec(fleft, tiger.Symbol.Symbol.symbol(id), null, null, e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function_decl ::= FUNCTION ID LPAREN RPAREN COLON STRING EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FunctionDec(fleft, tiger.Symbol.Symbol.symbol(id1), null, new NameTy(sleft, tiger.Symbol.Symbol.symbol("string")), e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_decl ::= FUNCTION ID LPAREN RPAREN COLON INT EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FunctionDec(fleft, tiger.Symbol.Symbol.symbol(id1), null, new NameTy(ileft, tiger.Symbol.Symbol.symbol("int")), e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // function_decl ::= FUNCTION ID LPAREN RPAREN COLON ID EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FunctionDec(fleft, tiger.Symbol.Symbol.symbol(id1), null, new NameTy(id2left, tiger.Symbol.Symbol.symbol(id2)), e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_decl ::= FUNCTION ID LPAREN type_fields RPAREN EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FunctionDec(fleft, tiger.Symbol.Symbol.symbol(id), tf, null, e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_decl ::= FUNCTION ID LPAREN type_fields RPAREN COLON STRING EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FunctionDec(fleft, tiger.Symbol.Symbol.symbol(id1), tf, new NameTy(sleft, tiger.Symbol.Symbol.symbol("string")), e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // function_decl ::= FUNCTION ID LPAREN type_fields RPAREN COLON INT EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FunctionDec(fleft, tiger.Symbol.Symbol.symbol(id1), tf, new NameTy(ileft, tiger.Symbol.Symbol.symbol("int")), e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_decl ::= FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FunctionDec(fleft, tiger.Symbol.Symbol.symbol(id1), tf, new NameTy(id2left, tiger.Symbol.Symbol.symbol(id2)), e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_decllist ::= function_decl function_decllist 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		FunctionDec fl = (FunctionDec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FunctionDec(f.pos, f.name, f.params, f.result, f.body, fl); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(11/*function_decllist*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_decllist ::= function_decl 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		RESULT = f; 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(11/*function_decllist*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable_decl ::= VAR ID COLON STRING ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new VarDec(vleft, tiger.Symbol.Symbol.symbol(id1), new NameTy(id1left, tiger.Symbol.Symbol.symbol("string")), e); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(9/*variable_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable_decl ::= VAR ID COLON INT ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new VarDec(vleft, tiger.Symbol.Symbol.symbol(id1), new NameTy(id1left, tiger.Symbol.Symbol.symbol("int")), e); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(9/*variable_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variable_decl ::= VAR ID ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new VarDec(vleft, tiger.Symbol.Symbol.symbol(id), null, e); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(9/*variable_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_decl ::= VAR ID COLON ID ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new VarDec(vleft, tiger.Symbol.Symbol.symbol(id1), new NameTy(id1left, tiger.Symbol.Symbol.symbol(id2)), e); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(9/*variable_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_fields ::= ID COLON STRING COMMA type_fields 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FieldList(i1left, tiger.Symbol.Symbol.symbol(i1), tiger.Symbol.Symbol.symbol("string"), tf); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type_fields ::= ID COLON INT COMMA type_fields 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FieldList(i1left, tiger.Symbol.Symbol.symbol(i1), tiger.Symbol.Symbol.symbol("int"), tf); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type_fields ::= ID COLON ID COMMA type_fields 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FieldList(i1left, tiger.Symbol.Symbol.symbol(i1), tiger.Symbol.Symbol.symbol(i2), tf); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type_fields ::= ID COLON STRING 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		 RESULT = new FieldList(i1left, tiger.Symbol.Symbol.symbol(i1), tiger.Symbol.Symbol.symbol("string"), null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type_fields ::= ID COLON INT 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		 RESULT = new FieldList(i1left, tiger.Symbol.Symbol.symbol(i1), tiger.Symbol.Symbol.symbol("int"), null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_fields ::= ID COLON ID 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FieldList(i1left, tiger.Symbol.Symbol.symbol(i1), tiger.Symbol.Symbol.symbol(i2), null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= STRING 
            {
              Ty RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new NameTy(sleft, tiger.Symbol.Symbol.symbol("string")); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= INT 
            {
              Ty RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new NameTy(ileft, tiger.Symbol.Symbol.symbol("int")); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= ARRAY OF STRING 
            {
              Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		 RESULT = new ArrayTy(aleft, tiger.Symbol.Symbol.symbol("string")); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= ARRAY OF INT 
            {
              Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		 RESULT = new ArrayTy(aleft, tiger.Symbol.Symbol.symbol("int")); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= ARRAY OF ID 
            {
              Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new ArrayTy(aleft, tiger.Symbol.Symbol.symbol(i)); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= LBRACE RBRACE 
            {
              Ty RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		 RESULT = new RecordTy(lleft, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= LBRACE type_fields RBRACE 
            {
              Ty RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		 RESULT = new RecordTy(lleft, tf);  
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= ID 
            {
              Ty RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new NameTy(idleft, tiger.Symbol.Symbol.symbol(id)); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_decl ::= TYPE ID EQ type 
            {
              TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new TypeDec(tleft, tiger.Symbol.Symbol.symbol(id), ty, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(7/*type_decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_decllist ::= type_decl type_decllist 
            {
              TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		TypeDec tl = (TypeDec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new TypeDec(t.pos, t.name, t.ty, tl); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(8/*type_decllist*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_decllist ::= type_decl 
            {
              TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = t; 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(8/*type_decllist*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decl ::= function_decllist 
            {
              Dec RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		FunctionDec fd = (FunctionDec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = fd; 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(5/*decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decl ::= variable_decl 
            {
              Dec RESULT = null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		VarDec vd = (VarDec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = vd; 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(5/*decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // decl ::= type_decllist 
            {
              Dec RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		TypeDec td = (TypeDec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = td; 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(5/*decl*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decl_list ::= decl decl_list 
            {
              DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new DecList(d, dl);
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(6/*decl_list*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // decl_list ::= decl 
            {
              DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new DecList(d, null);
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(6/*decl_list*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lvalue ::= ID LBRACK expr RBRACK 
            {
              Var RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		 RESULT = new SubscriptVar(ileft,new SimpleVar(ileft,tiger.Symbol.Symbol.symbol(i)),e); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(15/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lvalue ::= lvalue LBRACK expr RBRACK 
            {
              Var RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		 RESULT = new SubscriptVar(lleft, l, e); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(15/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lvalue ::= lvalue DOT ID 
            {
              Var RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FieldVar(lleft, l, tiger.Symbol.Symbol.symbol(id));
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(15/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lvalue ::= ID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new SimpleVar(idleft, tiger.Symbol.Symbol.symbol(id)); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(15/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_list ::= ID EQ expr COMMA field_list 
            {
              FieldExpList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		FieldExpList fl = (FieldExpList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FieldExpList(idleft, tiger.Symbol.Symbol.symbol(id), e, fl); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(14/*field_list*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_list ::= ID EQ expr 
            {
              FieldExpList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new FieldExpList(idleft, tiger.Symbol.Symbol.symbol(id), e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(14/*field_list*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_list ::= expr COMMA expr_list 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new ExpList(e, el); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(4/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_list ::= expr 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new ExpList(e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(4/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_seq ::= expr SEMICOLON expr_seq 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new ExpList(e, es); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(3/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_seq ::= expr 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new ExpList(e, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(3/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= NUM 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new IntExp(ileft, i); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= STR 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new StringExp(sleft, s); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= NIL 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new NilExp(nleft); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= MINUS expr 
            {
              Exp RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(mleft, new IntExp(e.pos, 0), OpExp.MINUS, e); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MINUS expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.MINUS, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr DIVIDE expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.DIV, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr TIMES expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.MUL, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr PLUS expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.PLUS, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr NEQ expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.NE, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr GE expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.GE, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr GT expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.GT, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr LE expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.LE, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr LT expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.LT, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr EQ expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.EQ, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr AND expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new IfExp(e1.pos, e1, e2, new IntExp(e1.pos, 0)); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr OR expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new IfExp(e1.pos, e1, new IntExp(e1.pos, 1), e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= lvalue ASSIGN expr 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new AssignExp(lleft, l, e); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= lvalue 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new VarExp(l.pos, l); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= LPAREN RPAREN 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		 RESULT = new SeqExp(lleft, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= LPAREN expr_seq RPAREN 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		 RESULT = new SeqExp(lleft, es); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= ID LPAREN RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		 RESULT = new CallExp(ileft, tiger.Symbol.Symbol.symbol(i), null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= ID LPAREN expr_list RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		 RESULT=new CallExp(ileft, tiger.Symbol.Symbol.symbol(i), el);
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= ID LBRACK expr RBRACK OF expr 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new ArrayExp(ileft, tiger.Symbol.Symbol.symbol(i), e1, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= ID LBRACE RBRACE 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		 RESULT = new RecordExp(ileft, tiger.Symbol.Symbol.symbol(i), null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= ID LBRACE field_list RBRACE 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		FieldExpList fl = (FieldExpList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		 RESULT = new RecordExp(ileft, tiger.Symbol.Symbol.symbol(i), fl); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= IF expr THEN expr ELSE expr 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new IfExp(ileft, e1, e2, e3); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= IF expr THEN expr 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new IfExp(ileft, e1, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= WHILE expr DO expr 
            {
              Exp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new WhileExp(wleft, e1, e2); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= FOR ID ASSIGN expr TO expr DO expr 
            {
              Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new ForExp(fleft, new VarDec(ileft, tiger.Symbol.Symbol.symbol(i), new NameTy(ileft, tiger.Symbol.Symbol.symbol("int")), e1), e2, e3); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= BREAK 
            {
              Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 RESULT = new BreakExp(bleft); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= LET decl_list IN END 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-2)).value;
		 RESULT = new LetExp(lleft, dl, null); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= LET decl_list IN expr_seq END 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		 RESULT = new LetExp(lleft, dl, new SeqExp(esleft, es)); 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= expr 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).value;
		 parser.parseResult = (Exp)e; 
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          return CUP$Tigerparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).value;
		RESULT = start_val;
              CUP$Tigerparser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tigerparser$stack.elementAt(CUP$Tigerparser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Tigerparser$parser.done_parsing();
          return CUP$Tigerparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

